problem 17:

package com.training;

public interface EulerSolution{

	 public String run();

}
public final class MaximumPathSum implements EulerSolution{
	
		 public static void main(String[] args) {
		
		  System.out.println(new MaximumPathSum().run());
		
		 }
		
		  public String run() {
		
		  for (int i = triangle.length - 2; i >= 0; i--) {
		
		   for (int j = 0; j < triangle[i].length; j++)
		
		    triangle[i][j] += Math.max(triangle[i + 1][j], triangle[i + 1][j + 1]);  // Dynamic programming
		
		  }
		
		  return Integer.toString(triangle[0][0]);
		
		 }
		
		  
		
		 private int[][] triangle = {
		
		  {75},
		
		  {95,64},
		
		  {17,47,82},
		
		  {18,35,87,10},
		
		  {20,04,82,47,65},
		
		  {19,01,23,75,03,34},
		
		  {88,02,77,73,07,63,67},
		
		  {99,65,04,28,06,16,70,92},
		
		  {41,41,26,56,83,40,80,70,33},
		
		  {41,48,72,33,47,32,37,16,94,29},
		
		  {53,71,44,65,25,43,91,52,97,51,14},
		
		  {70,11,33,28,77,73,17,78,39,68,17,57},
		
		  {91,71,52,38,17,14,91,43,58,50,27,29,48},
		
		  {63,66,04,68,89,53,67,30,73,16,69,87,40,31},
		
		  {04,62,98,27,23, 9,70,98,73,93,38,53,60,04,23}
		
		 };

}

=======================================================================================
problem 18:

package com.training;

public class NumberLetterCounts {
	
		String[] ones = {"one","two","three","four","five","six","seven","eight","nine"};
		String[] tens = {"ten","twenty","thirty","forty","fifty","sixty","seventy","eighty","ninety"};
		String[] hundreds = {"onehundred","twohundred","threehundred","fourhundred","fivehundred","sixhundred","sevenhundred","eighthundred","ninehundred"};
		String onethousand = "onethousand";
		public int totalValue = 0;

		public static void main(String[] args) {
			NumberLetterCounts one = new NumberLetterCounts();
			one.compute();
		}
		public void compute()
		{
			for(int x=0;x<=999;x++)
			{
				System.out.println(x);
				getNumberValue(x);

			}
			totalValue+=11; 
			System.out.println(totalValue);
		}

		public void getNumberValue(int number)
		{
			int originalnumber = number;
			int ones = 0;
			int tens = 0;
			int hundreds = 0;
			int numbervalue = 0;
			while(number!=0)
			{
				
				if(number>=100)
				{
					number-=100;
					hundreds++;
				}
				
				if(number<100&&number>=10)
				{
					number-=10;
					tens++;
				}
				if(number<10&&number>0)
				{
					number-=1;
					ones++;
				}
			}
			if(originalnumber>100){
				totalValue+=3;
				numbervalue+=3;
			}
			if(hundreds!=0){
				totalValue+= this.hundreds[hundreds-1].length();
				numbervalue+= this.hundreds[hundreds-1].length();
			}
			if(tens!=0){
				totalValue+= this.tens[tens-1].length();
				numbervalue+= this.tens[tens-1].length();
			}
			if(ones!=0)
			{
				totalValue+= this.ones[ones-1].length();
				numbervalue+= this.ones[ones-1].length();
			}
		}
	}

