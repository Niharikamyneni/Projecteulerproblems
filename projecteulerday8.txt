problem 15:

package com.training;

import java.math.BigInteger;

public class LatticePaths {

	public static void main(String[] args) {
		 int n=40;
		 int r=20;
		 System.out.println(factorial(n).divide(factorial(r).multiply(factorial(n-r))));
	}
	public static BigInteger factorial(int number)

	{
		BigInteger n = BigInteger.ONE;
		for(int i=1;i<=number;i++) {
			n=n.multiply(BigInteger.valueOf(i));
			
		}
		return n;
	}
}

=============================================================================================
problem 16:

package com.training;

import java.math.BigInteger;

public class PowerDigitSum {
	
		private static int calcDigits(String s)
		{
			int sum = 0;
	 
			for (int i = 0; i < s.length(); i++)
			{
				Character c = new Character(s.charAt(i));
				String z = c.toString();
				int j = Integer.parseInt(z);
				sum += j;
			}
	 
			return sum;
		}
	 
		public static void main(String[] args)
		{
			long begin = System.currentTimeMillis();
	 
			BigInteger n = BigInteger.valueOf(2);
			n = n.pow(1000);
			System.out.println(calcDigits(n.toString()));
	 
			long end = System.currentTimeMillis();
			System.out.println(end - begin + "ms");
		}
	}

